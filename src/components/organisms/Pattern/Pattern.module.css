/**
 * Cyclone - Pattern Component Styles
 * Terminal-styled pattern with drag and resize functionality
 */

.pattern {
  position: absolute;
  /* Stretch to fill track height with minimal margin (works even at small zoom) */
  top: 2px;
  bottom: 2px;
  background: var(--color-bg-elevated);
  border: var(--border-width-base) solid var(--pattern-color, var(--color-secondary));
  cursor: pointer;
  user-select: none;
  /* Include borders in width calculation for precise alignment */
  box-sizing: border-box;
  /* Smooth transitions for all state changes */
  transition:
    border-color var(--transition-base),
    box-shadow var(--transition-base),
    background-color var(--transition-base),
    opacity var(--transition-fast);
  display: flex;
  align-items: stretch;
}

/* Background tint using the track color */
.pattern[style*="--pattern-color"]::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--pattern-color);
  opacity: 0.22;
  pointer-events: none;
  filter: saturate(1.4) brightness(1.1);
}

/* Hover state - subtle highlight with pattern color */
.pattern:hover {
  border-color: var(--pattern-color, var(--color-primary));
  background: color-mix(in srgb, var(--color-bg-elevated) 97%, var(--pattern-color, var(--color-primary)));
  box-shadow: 0 0 4px color-mix(in srgb, var(--pattern-color, var(--color-primary)) 30%, transparent);
}

/* Selected state - modern and subtle with pattern color accent */
.selected {
  border-color: var(--pattern-color, var(--color-highlight));
  border-width: var(--border-width-thick);
  box-shadow:
    0 0 0 1px var(--pattern-color, var(--color-highlight)),
    0 0 8px color-mix(in srgb, var(--pattern-color, var(--color-highlight)) 40%, transparent);
  z-index: var(--z-timeline-pattern-selected);
  background: var(--color-bg-elevated);
  transition:
    box-shadow var(--transition-base),
    border-color var(--transition-base),
    background-color var(--transition-base),
    border-width var(--transition-base);
}

/* Subtle pattern color tint on selected patterns */
.selected::before {
  opacity: 0.28 !important;
  filter: saturate(1.6) brightness(1.2) !important;
}

/* Hover on selected patterns - enhance with pattern color */
.selected:hover {
  box-shadow:
    0 0 0 1px var(--pattern-color, var(--color-highlight)),
    0 0 12px color-mix(in srgb, var(--pattern-color, var(--color-highlight)) 50%, transparent);
  background: color-mix(in srgb, var(--color-bg-elevated) 95%, var(--pattern-color, var(--color-highlight)));
  border-color: color-mix(in srgb, var(--pattern-color, var(--color-highlight)) 80%, white);
}

.selected .corner {
  color: var(--color-highlight);
  text-shadow: var(--phosphor-glow-lg);
}

.dragging,
.resizing {
  opacity: 0.8;
  cursor: grabbing;
  z-index: var(--z-tooltip); /* Ensure dragging patterns are above everything */
}

.copying {
  box-shadow: var(--phosphor-glow-lg);
  animation: pattern-copying-pulse 400ms ease-in-out infinite;
}

@keyframes pattern-copying-pulse {
  0%, 100% {
    border-color: var(--color-highlight);
  }
  50% {
    border-color: var(--color-primary);
  }
}

/* Pattern Body - Wraps info bar and content in column layout */
.patternBody {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-width: 0;
  position: relative;
  overflow: hidden;
}

/* Pattern Info Bar - Top section with mute/name/type - spans full pattern width */
.infoBar {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-xs) var(--spacing-sm);
  /* Use background color instead of rgba to ensure consistency across entire cell */
  background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black to show track color through */
  border-bottom: var(--border-width-thin) solid var(--color-secondary);
  font-family: var(--font-primary);
  font-size: var(--font-size-xs);
  color: var(--color-primary);
  cursor: grab;
  z-index: 3; /* Above handles and content */
  min-height: 0;
  line-height: 1;
  transition: background-color var(--transition-base), border-color var(--transition-base);
  pointer-events: none; /* Allow clicks to pass through to handles underneath */
  /* Ensure background extends behind everything */
  box-sizing: border-box;
}

.selected .infoBar {
  border-bottom-color: var(--color-highlight);
}

/* Mute icon - positioned on left */
.muteIcon {
  position: absolute;
  left: var(--spacing-sm);
  font-size: var(--font-size-xs);
  color: var(--color-secondary);
  opacity: var(--opacity-semi);
  transition: color var(--transition-base), opacity var(--transition-base);
  /* Keep pointer-events: none inherited from parent to not block left handle */
}

.selected .muteIcon {
  color: var(--color-highlight);
  opacity: var(--opacity-full);
}

/* Pattern name in info bar - always centered */
.infoName {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  text-align: center;
  max-width: 60%;
  transition: color var(--transition-base);
  pointer-events: auto; /* Re-enable clicks on this element */
}

.selected .infoName {
  color: var(--color-highlight);
}

/* Pattern type badge in info bar - positioned on right */
.infoType {
  position: absolute;
  right: var(--spacing-sm);
  font-size: var(--font-size-xs);
  color: var(--color-secondary);
  border: var(--border-width-thin) solid var(--color-secondary);
  padding: 1px var(--spacing-xs);
  line-height: 1;
  transition: color var(--transition-base), border-color var(--transition-base);
  /* Keep pointer-events: none inherited from parent to not block right handle */
}

.selected .infoType {
  color: var(--color-highlight);
  border-color: var(--color-highlight);
}

/* Pattern Content */
.content {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: var(--spacing-xs);
  cursor: grab;
  position: relative;
  overflow: hidden;
  box-sizing: border-box;
}

.dragging .content {
  cursor: grabbing;
}

/* Legacy ASCII corners - hidden */
.corners,
.cornersBottom,
.corner {
  display: none;
}

/* Legacy label - hidden when info bar is shown */
.label {
  display: none;
}

/* Pattern Label Input */
.labelInput {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: calc(100% - var(--spacing-md));
  font-family: var(--font-primary);
  font-size: var(--font-size-sm);
  color: var(--color-primary);
  background: var(--color-bg);
  border: 1px solid var(--color-primary);
  padding: var(--spacing-xs);
  text-align: center;
  z-index: 10;
}

.labelInput:focus {
  outline: none;
  border-color: var(--color-highlight);
  box-shadow: var(--phosphor-glow-sm);
}

/* Resize Handles */
.handle {
  /* Dynamic width: larger patterns get wider handles, small patterns get minimal handles */
  width: min(var(--spacing-lg), max(var(--spacing-xs), 20%));
  cursor: ew-resize;
  background: transparent;
  position: relative;
  flex-shrink: 0;
  transition:
    background-color var(--transition-fast),
    opacity var(--transition-fast);
}

/* Extended hit area using pseudo-element for better grab at all sizes */
.handle::before {
  content: '';
  position: absolute;
  top: calc(-1 * var(--spacing-xs));
  bottom: calc(-1 * var(--spacing-xs));
  /* Extend hit area outward for easier grabbing */
  width: calc(100% + var(--spacing-lg));
  cursor: inherit;
}

.handleLeft::before {
  left: calc(-1 * var(--spacing-sm));
  right: 0;
}

.handleRight::before {
  left: 0;
  right: calc(-1 * var(--spacing-sm));
}

.handle:hover {
  background: var(--color-primary);
  opacity: 0.5;
}

.handleLeft {
  left: 0;
  cursor: w-resize;
}

.handleRight {
  right: 0;
  cursor: e-resize;
}

/* Muted pattern state - reduced opacity with diagonal stripes */
.muted {
  opacity: var(--opacity-semi);
  background-image: repeating-linear-gradient(
    45deg,
    transparent,
    transparent 5px,
    color-mix(in srgb, var(--color-primary) 10%, transparent) 5px,
    color-mix(in srgb, var(--color-primary) 10%, transparent) 10px
  );
}

/* Legacy type badge - hidden when info bar is shown */
.typeBadge {
  display: none;
}

/* Phosphor burn-in animation for newly created patterns */
@keyframes pattern-burn-in {
  0% {
    opacity: 0;
    box-shadow: var(--phosphor-glow-xl);
    border-color: var(--color-highlight);
    transform: scale(1.05);
  }
  30% {
    opacity: var(--opacity-full);
    box-shadow: var(--phosphor-glow-xl);
    border-color: var(--color-highlight);
  }
  100% {
    opacity: var(--opacity-full);
    box-shadow: var(--phosphor-glow-sm);
    border-color: var(--color-secondary);
    transform: scale(1);
  }
}

.new {
  animation: pattern-burn-in var(--duration-slower) var(--ease-out);
}

/* Pattern Loop Visualization - Shows the full scene duration with looped portion */
.loopFill {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  background: var(--color-bg-elevated);
  /* Subtle opacity fade for looped section - non-distracting */
  opacity: 0.5;
  pointer-events: none;
  z-index: 0;
}

/* Loop boundary marker - minimal vertical line at loop point */
.loopFill::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 1px;
  background: var(--color-secondary);
  opacity: 0.6;
}

/* Overflow indicator - Shows when pattern exceeds scene boundary */
.overflowIndicator {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  width: 3px;
  background: repeating-linear-gradient(
    45deg,
    var(--color-warning, #ff9900),
    var(--color-warning, #ff9900) 4px,
    transparent 4px,
    transparent 8px
  );
  pointer-events: none;
  z-index: 10;
  opacity: 0.8;
}

/* When pattern is looping, ensure content sits on top */
.looping .content {
  position: relative;
  z-index: 1;
}

/* Ensure handles are visible on looping patterns */
.looping .handle {
  position: relative;
  z-index: 2;
}

/* Velocity Visualization - Shows velocity as waveform bars */
.velocityVisualization {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  /* Height should reach bottom of info bar, not extend behind it */
  top: calc(var(--spacing-xs) * 2 + var(--font-size-xs) + var(--border-width-thin));
  display: flex;
  align-items: flex-end;
  pointer-events: none;
  z-index: 0;
}

.velocityBar {
  position: absolute;
  bottom: 0;
  width: 2px;
  background: var(--pattern-color, var(--color-primary));
  opacity: 0.75;
  /* Enhanced glow for more visible waveform */
  box-shadow: 0 0 4px var(--pattern-color, var(--color-primary));
  pointer-events: none;
  filter: brightness(1.5) saturate(1.4);
}

/* Brighter velocity bars on selected patterns */
.selected .velocityBar {
  opacity: 0.9;
  box-shadow: 0 0 6px var(--color-highlight);
  background: var(--color-highlight);
  filter: brightness(1.7) saturate(1.5);
}

/* Dimmer velocity bars on muted patterns */
.muted .velocityBar {
  opacity: 0.4;
  filter: brightness(0.9) saturate(0.9);
}

/* Density Visualization - Shows activity density as regions */
.densityVisualization {
  position: absolute;
  /* Top should be below info bar */
  top: calc(var(--spacing-xs) * 2 + var(--font-size-xs) + var(--border-width-thin));
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  pointer-events: none;
  z-index: 0;
}

.densityRegion {
  position: absolute;
  top: 0;
  bottom: 0;
  background: var(--pattern-color, var(--color-primary));
  pointer-events: none;
  /* Opacity is set inline based on density value */
  filter: brightness(1.5) saturate(1.4);
}

/* Brighter density regions on selected patterns */
.selected .densityRegion {
  background: var(--color-highlight);
  filter: brightness(1.7) saturate(1.5);
}

/* Dimmer density regions on muted patterns */
.muted .densityRegion {
  opacity: 0.5 !important; /* Override inline opacity */
  filter: brightness(0.9) saturate(0.9);
}

/* Respect reduced motion preference */
@media (prefers-reduced-motion: reduce) {
  .pattern,
  .selected,
  .handle {
    transition: none;
    animation: none;
  }

  .new {
    animation: none;
    opacity: 1;
  }

  .selected {
    /* Keep selection visible but remove animations */
    animation: none;
    box-shadow: var(--box-glow-xl);
  }

  @keyframes pattern-select-glow {
    0%, 100% {
      box-shadow: var(--box-glow-lg);
      border-color: var(--color-highlight);
    }
  }
}
